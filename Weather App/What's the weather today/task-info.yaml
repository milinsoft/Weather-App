type: edu
custom_name: What's the weather today?
files:
- name: web/app.py
  visible: true
  text: |
    from flask import Flask, render_template, request
    import sys

    app = Flask(__name__)


    # def page_not_found(e):
    #    return render_template('404.html'), 404


    @app.route('/')
    def index():
        return render_template('index.html')
        # include in Response ?


    @app.route('/add', methods=['POST'])
    def add_city():
        pass


    # app.register_error_handler(404, page_not_found)


    # don't change the following way to run flask:
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port)
        else:
            app.run()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import asyncio

    from hstest import FlaskTest, CheckResult, WrongAnswer
    from hstest import dynamic_test
    from hstest.dynamic.security.exit_handler import ExitHandler
    from pyppeteer import launch


    class FlaskProjectTest(FlaskTest):
        source = 'web.app'
        run_args = {
            "headless": False,
            "defaultViewport": None,
            "args": ['--start-maximized', '--disable-infobar'],
            "ignoreDefaultArgs": ['--enable-automation'],
        }

        async def launch_and_get_browser(self):
            try:
                return await launch(self.run_args)
            except Exception as error:
                raise WrongAnswer(str(error))

        async def close_browser(self, browser):
            try:
                await browser.close()
            except Exception as ex:
                print(ex)

        async def get_input_field(self, page):
            input_field = await page.querySelector('input#input-city')
            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")
            return input_field

        async def get_submit_button(self, page):
            button = await page.querySelector('button.submit-button')
            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")
            return button

        @classmethod
        async def check_cards_in_the_page(cls, page, cards_number):
            cards = await page.querySelectorAll('div.card')

            if len(cards) == 0:
                raise WrongAnswer("Can't find <div> blocks with class 'card'")

            if len(cards) != cards_number:
                raise WrongAnswer(f"Found {len(cards)} <div> blocks with class 'card', but should be {cards_number}!")

            for card in cards:
                degrees = await card.querySelector('div.degrees')
                if degrees is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'degrees'")
                state = await card.querySelector('div.state')
                if state is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'state'")
                city = await card.querySelector('div.city')
                if city is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'city'")

        async def test_response_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            try:
                await page.goto(self.get_url())
            except Exception:
                raise WrongAnswer(f"Can't access the main page with URL '{self.get_url()}'")
            await self.close_browser(browser)

        @dynamic_test(order=1, time_limit=-1)
        def test_response(self):
            ExitHandler.revert_exit()
            asyncio.get_event_loop().run_until_complete(self.test_response_async())
            return CheckResult.correct()

        async def test_main_page_structure_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()

            await page.goto(self.get_url())

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            button = await self.get_submit_button(page)
            input_field = await self.get_input_field(page)

            await self.check_cards_in_the_page(page, 3)

            await self.close_browser(browser)

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_main_page_structure(self):
            asyncio.get_event_loop().run_until_complete(self.test_main_page_structure_async())
            return CheckResult.correct()

        async def test_add_city_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Boston')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 4)

        @dynamic_test(order=3)
        def test_add_city(self):
            asyncio.get_event_loop().run_until_complete(self.test_add_city_async())
            return CheckResult.correct()


    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: web/templates/404.html
  visible: true
  learner_created: true
- name: web/static/404.css
  visible: true
  learner_created: true
- name: web/static/style.css
  visible: true
  learner_created: true
- name: web/templates/index.html
  visible: true
  learner_created: true
- name: web/static/city.list.txt
  visible: true
  learner_created: true
- name: web/static/city.list.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/164/stages/853/implement#comment
status: Failed
feedback:
  message: |-
    Unexpected error in test #3

    We have recorded this bug and will fix it soon.

    Submitted via IDE

    OS Darwin 21.4.0
    CPython 3.9.6
    Testing library version 8

    Traceback (most recent call last):
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/stage/stage_test.py", line 132, in run_tests
        result: CheckResult = test_run.test()
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/testing/test_run.py", line 101, in test
        self._check_errors()
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/testing/test_run.py", line 137, in _check_errors
        raise error_in_test
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/testing/runner/flask_application_runner.py", line 111, in test
        result = test_case.dynamic_testing()
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/dynamic/input/dynamic_testing.py", line 81, in <lambda>
        tests += [lambda o=obj, a=args: self.test(o, *a)]
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/hstest/dynamic/dynamic_test.py", line 38, in <lambda>
        test=lambda *a, **k: self.fn(*a, **k),
      File "/Users/aleksander/PycharmProjects/Weather App/Weather App/task/tests.py", line 130, in test_add_city
        asyncio.get_event_loop().run_until_complete(self.test_add_city_async())
      File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
        return future.result()
      File "/Users/aleksander/PycharmProjects/Weather App/Weather App/task/tests.py", line 109, in test_add_city_async
        await page.goto(self.get_url())
      File "/Users/aleksander/PycharmProjects/Weather App/.idea/VirtualEnvironment/lib/python3.9/site-packages/pyppeteer/page.py", line 885, in goto
        raise error
    pyppeteer.errors.TimeoutError: Navigation Timeout Exceeded: 30000 ms exceeded.

    Please find below the output of your program during this failed test.

    ---

    stdout:
    * Serving Flask app 'app' (lazy loading)
     * Environment: production
       WARNING: This is a development server. Do not use it in a production deployment.
       Use a production WSGI server instead.
     * Debug mode: on

    stderr:
    * Running on http://localhost:8000 (Press CTRL+C to quit)
     * Restarting with stat
     * Debugger is active!
     * Debugger PIN: 808-083-756
    127.0.0.1 - - [03/Apr/2022 14:21:12] "GET / HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:12] "GET /static/style.css HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:12] "GET /static/img/evening-morning.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:12] "GET /static/img/day.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:12] "GET /static/img/night.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:16] "GET / HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:16] "GET /static/style.css HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:16] "GET /static/img/evening-morning.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:16] "GET /static/img/day.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:16] "GET /static/img/night.jpg HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:20] "GET / HTTP/1.1" 200 -
    127.0.0.1 - - [03/Apr/2022 14:21:20] "GET /static/style.css HTTP/1.1" 200 -
  time: Sun, 03 Apr 2022 12:21:51 UTC
record: 2
