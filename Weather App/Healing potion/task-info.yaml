type: edu
files:
- name: web/app.py
  visible: true
  text: |
    import json

    from flask import Flask, render_template, request
    import sys
    import requests

    app = Flask(__name__)

    API_KEY = 'a2eec5522c1c2c34cdf69f49e448083b'
    user_agent = {'User-agent': 'Mozilla/5.0'}

    def page_not_found(e):
        return render_template('404.html'), 404


    @app.route('/', methods=['GET', 'POST'])
    def index():
        if request.method == 'GET':
            return render_template('index.html')
        else:
            city_name = request.form.get('city_name')

            if not city_name:
                return render_template('index.html')


            if city_name:
                with open('static/city.list.json', 'r') as data:
                    city_data = [x for x in json.load(data) if city_name.lower() in x['name'].lower()]
                    if city_data:
                        city_id = city_data[0]['id']
                        web_site = f'https://api.openweathermap.org/data/2.5/weather?id={city_id}&appid={API_KEY}'
                        r = requests.get(web_site, headers=user_agent)
                        if r.status_code == 200:
                            dict_with_weather_info = json.loads(r.text)
                            # TODO add save to file functionality?
                            return render_template('index.html', weather=dict_with_weather_info)
                            # TODO need to add var "weather" to index HTML
                    else:
                        return "This city does not exist!"

            # return render_template('index.html')









    # don't change the following way to run flask:
    if __name__ == '__main__':
        app.register_error_handler(404, page_not_found)
        if len(sys.argv) > 1:
            arg_host, arg_port = sys.argv[1].split(':')
            app.run(host=arg_host, port=arg_port, debug=True)
        else:
            app.run(debug=True)
  learner_created: false
- name: web/templates/404.html
  visible: true
  learner_created: false
- name: web/static/404.css
  visible: true
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import asyncio
    import os

    from hstest import FlaskTest, CheckResult, WrongAnswer
    from hstest import dynamic_test
    from hstest.dynamic.security.exit_handler import ExitHandler
    from pyppeteer import launch


    class FlaskProjectTest(FlaskTest):
        source = 'web.app'
        run_args = {
            "headless": False,
            "defaultViewport": None,
            "args": ['--start-maximized', '--disable-infobar'],
            "ignoreDefaultArgs": ['--enable-automation'],
        }

        async def launch_and_get_browser(self):
            try:
                return await launch(self.run_args)
            except Exception as error:
                raise WrongAnswer(str(error))

        async def close_browser(self, browser):
            try:
                await browser.close()
            except Exception as ex:
                print(ex)

        async def get_input_field(self, page):
            input_field = await page.querySelector('input#input-city')
            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")
            return input_field

        async def get_submit_button(self, page):
            button = await page.querySelector('button.submit-button')
            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")
            return button

        def generate(self):
            try:
                if os.path.exists('web/weather.db'):
                    os.remove('web/weather.db')
            except Exception as ignored:
                raise WrongAnswer(f"Looks like your 'weather.db' database file is blocked. "
                                  f"Stop your apps that connects to that database!")
            return []

        @classmethod
        async def check_cards_in_the_page(cls, page, cards_number):
            cards = await page.querySelectorAll('div.card')

            if len(cards) != cards_number:
                raise WrongAnswer(f"Found {len(cards)} <div> blocks with class 'card', but should be {cards_number}!")

            for card in cards:
                degrees = await card.querySelector('div.degrees')
                if degrees is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'degrees'")
                state = await card.querySelector('div.state')
                if state is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'state'")
                city = await card.querySelector('div.city')
                if city is None:
                    raise WrongAnswer(
                        "One of the <div> blocks with card class 'card' doesn't contain <div> block with class 'city'")

        async def test_response_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            try:
                await page.goto(self.get_url())
            except Exception:
                raise WrongAnswer(f"Can't access the main page with URL '{self.get_url()}'")
            await self.close_browser(browser)

        @dynamic_test(order=1, time_limit=-1)
        def test_response(self):
            ExitHandler.revert_exit()
            asyncio.new_event_loop().run_until_complete(self.test_response_async())
            return CheckResult.correct()

        async def test_main_page_structure_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()

            await page.goto(self.get_url())

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            button = await self.get_submit_button(page)

            if button is None:
                raise WrongAnswer("Can't find a button with 'submit-button' class!")

            input_field = await self.get_input_field(page)

            if input_field is None:
                raise WrongAnswer("Can't find input field with 'input-city' id!")

            await self.check_cards_in_the_page(page, 0)

            await browser.close()

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_main_page_structure(self):
            asyncio.new_event_loop().run_until_complete(self.test_main_page_structure_async())
            return CheckResult.correct()

        async def test_add_city_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('London')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 1)

        @dynamic_test(order=3)
        def test_add_city(self):
            asyncio.new_event_loop().run_until_complete(self.test_add_city_async())
            return CheckResult.correct()

        async def test_city_name_after_adding_async(self):

            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Fairbanks')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 2)

        @dynamic_test(order=4)
        def test_city_name_after_adding(self):
            asyncio.new_event_loop().run_until_complete(self.test_city_name_after_adding_async())
            return CheckResult.correct()

        async def test_refresh_async(self):
            browser = await self.launch_and_get_browser()
            page = await browser.newPage()
            await page.goto(self.get_url())

            input_field = await self.get_input_field(page)
            await input_field.type('Idaho')

            button = await self.get_submit_button(page)

            await asyncio.gather(
                page.waitForNavigation(),
                button.click(),
            )

            cards_div = await page.querySelector('div.cards')

            if cards_div is None:
                raise WrongAnswer("Can't find <div> block with class 'cards'")

            await self.check_cards_in_the_page(page, 3)

            await page.reload()

            await self.check_cards_in_the_page(page, 3)

        @dynamic_test(order=5)
        def test_refresh(self):
            asyncio.new_event_loop().run_until_complete(self.test_refresh_async())
            return CheckResult.correct()


    if __name__ == '__main__':
        FlaskProjectTest().run_tests()
  learner_created: false
- name: web/static/img/funny-404-error.jpg
  visible: true
  text: 
  learner_created: true
- name: web/static/style.css
  visible: true
  text: ".cards {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fill, minmax(25%,\
    \ 1fr));\n\tgrid-gap: 1vw;\n\tgrid-auto-rows: 30vw;\n\tpadding-left: 20%;\n\t\
    padding-right: 20%;\n\tmargin-bottom: 2vw;\n\tjustify-content: center;\n}\n.card\
    \ {\n\tpadding: 0;\n\tborder: none;\n\tbox-shadow: 0 0 1vw rgba(0,0,0,0.5);\n\t\
    background-size: cover;\n\tborder-radius: 0.5vw !important;\n\tcolor: white;\n\
    \tfont-weight: 600;\n\ttext-shadow: 0px 0px 1vw rgba(0,0,0,0.7);\n}\n\nhtml, body\
    \ {\n\tmin-height: 100vh;\n\tbackground: linear-gradient(#836273, #373252);\n\t\
    background-repeat: no-repeat;\n\tbackground-attachment: fixed;\n\tpadding: 0;\n\
    \tmargin: 0;\n\tfont-family: 'Open Sans', sans-serif;\n}\n\n.form {\n\tmargin-top:\
    \ 7%;\n\tpadding-left: 10%;\n\tpadding-right: 10%;\n\ttext-align: center;\n\t\
    font-size: 1vw;\n\tmargin-bottom: 3%;\n}\n\ninput {\n\tborder: none;\n\toutline:\
    \ none;\n\theight: 3vw;\n\twidth: 40vw;\n\tpadding-left: 0.5vw;\n\tbox-shadow:\
    \ 0 0 1vw rgba(0,0,0,0.5);\n}\n\n.submit-button {\n\tmargin-left: 1vw;\n\theight:\
    \ 3vw;\n\twidth: 9vw;\n\tborder: none;\n\toutline: none !important;\n\tbackground-color:\
    \ #373252;\n\tcolor: white;\n\tbox-shadow: 0 0 1vw rgba(0,0,0,0.5);\n}\n\n.night\
    \ {\n\tbackground-image: url(\"/static/img/night.jpg\");\n}\n\n.day {\n\tbackground-image:\
    \ url(\"/static/img/day.jpg\");\n}\n\n.evening-morning {\n\tbackground-image:\
    \ url(\"/static/img/evening-morning.jpg\");\n}\n\n.wrapper {\n\tmin-height: 100vh;\n\
    }\n\n\n.delete-wrapper {\n\ttext-align: right;\n\tfont-size: 1vw;\n\theight: 20%;\n\
    \twidth: 100%;\n\tpadding-right: 0.5vw;\n\tpadding-top: 0.4vw;\n}\n\n.degrees\
    \ {\n\ttext-align: center;\n\tfont-size: 2.5vw;\n\theight: 10%;\n}\n\n.day > .degrees\
    \ {\n\tcolor: black;\n}\n\n.state {\n\ttext-align: center;\n\tfont-size: 1.5vw;\n\
    }\n\n.day > .state {\n\tcolor: black;\n}\n\n.city {\n\ttext-align: center;\n\t\
    height: 70%;\n\tfont-size: 2vw;\n\tdisplay: flex;\n\tjustify-content: center;\n\
    \    align-items: flex-end;\n    padding-bottom: 6%;\n}\n\n.day > .state {\n\t\
    color: black;\n}\n\n\n.alert {\n\ttext-align: center;\n\twidth: 30vw;\n\tmargin:\
    \ auto;\n\tmargin-bottom: 1vw;\n\tbackground-color: #373252;\n\tcolor: white;\n\
    \tborder: none;\n\tpadding: 0.5vw;\n\tborder-radius: 0.4vw;\n\tmargin-top: -3%;\n\
    }\n\n.celsius {\n\tfont-size: 1.75vw;\n}\n\n.delete-button {\n\tbackground-color:\
    \ transparent;\n\twidth: 1.5vw;\n\theight: 1vw;\n\tmargin: 0;\n\tpadding: 0;\n\
    \tborder: none;\n\tcolor: white;\n}\n\n.day > .delete-wrapper > form > .delete-button\
    \ {\n\tcolor: black !important;\n}\n\n.delete-button:focus, .delete-button:active\
    \ {\n\tborder: none;\n\toutline: none;\n}\n\n::-webkit-scrollbar {\n  width: 0.5vw;\n\
    \n  background:-webkit-linear-gradient(0, blue 50%, white 100%);\n}\n\n::-webkit-scrollbar-track\
    \ {\n  background:  linear-gradient(0deg, #836273 0%, #373252 100%);\n\n::-webkit-scrollbar-thumb\
    \ {\n  background: #888;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background:\
    \ #555;\n}\n"
  learner_created: true
- name: web/templates/index.html
  visible: true
  learner_created: true
- name: web/weather.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12328#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Apr 2022 18:09:00 UTC
record: -1
